/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import { type ParsedGreetInstruction } from '../instructions';

export const ESCROW_DAPP_PROGRAM_ADDRESS =
  '4XLs7eTjECzLwby7D9SwWbSZa9BjFvMrDZb7zEaVNC5k' as Address<'4XLs7eTjECzLwby7D9SwWbSZa9BjFvMrDZb7zEaVNC5k'>;

export enum EscrowDappInstruction {
  Greet,
}

export function identifyEscrowDappInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): EscrowDappInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([203, 194, 3, 150, 228, 58, 181, 62])
      ),
      0
    )
  ) {
    return EscrowDappInstruction.Greet;
  }
  throw new Error(
    'The provided instruction could not be identified as a escrowDapp instruction.'
  );
}

export type ParsedEscrowDappInstruction<
  TProgram extends string = '4XLs7eTjECzLwby7D9SwWbSZa9BjFvMrDZb7zEaVNC5k',
> = {
  instructionType: EscrowDappInstruction.Greet;
} & ParsedGreetInstruction<TProgram>;
